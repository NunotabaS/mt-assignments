#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

# Utilities borrowed from ./grade
def bitmap(sequence):
  """ Generate a coverage bitmap for a sequence of indexes """
  return reduce(lambda x,y: x|y, map(lambda i: long('1'+'0'*i,2), sequence), 0)

def bitmap2str(b, n, on='o', off='.'):
  """ Generate a length-n string representation of bitmap b """
  return '' if n==0 else (on if b&1==1 else off) + bitmap2str(b>>1, n-1, on, off)

def logadd10(x,y):
  """ Addition in logspace (base 10): if x=log(a) and y=log(b), returns log(a+b) """
  return x + math.log10(1 + pow(10,y-x))

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=50, type="int", help="Maximum stack size (default=10)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

# TM contains tuples of words
sys.stderr.write("Using stack: %i, considering %i translations\n" % (opts.s, opts.k))
tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

def extract_english(h): 
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]


sys.stderr.write("Decoding %s...\n" % (opts.input,))
for french_sentence in french:
  # create future costs
  future_costs = {}
  for length in range(1, len(french_sentence) + 1):
    # We start with shorter lengths so we can do DP
    for start in range(0, len(french_sentence) + 1 - length):
      end = start + length
      # Initialize future costs to infinity
      future_costs[(start,end)] = -float("inf")
      phrases = [] if not french_sentence[start:end] in tm else tm[french_sentence[start:end]]
      if len(phrases) > 0:
        best = phrases[0] # Highest prob phrase
        logprob = best.logprob
        lm_state = () # Unknown state
        for word in best.english.split():
          lm_state, word_logprob = lm.score(lm_state, word)
          logprob += word_logprob
        future_costs[(start, end)] = logprob
        # Do some DP to figure out the best
      for split in range(start + 1, end):
        future_costs[(start, end)] = max(future_costs[(start, split)] + future_costs[(split, end)], future_costs[(start, end)])
  
  sys.stderr.write("Built the future_costs table!\n");
  # create named tuple so its easier to deal with the values we are working on
  hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, bitmap, future_cost")
  initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, 0, future_costs[(0, len(french_sentence))])
  
  # initialize an array of dictionaries of size N+1 (where N is the number of tokens) 
  stacks = [{} for _ in french_sentence] + [{}]
  
  # add a sentence start token as the initial hypothesis to start with
  stacks[0][lm.begin()] = initial_hypothesis

  # loop through all but the last stack in the array of stacks (so for each word)
  for i, stack in enumerate(stacks[:-1]):
    
    # loop through stack dictionary contents, starting with the values with the lowest log probability
    for current_hypothesis in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
      for s in xrange(0, len(french_sentence)):
        for j in xrange(s + 1,len(french_sentence) + 1):
          # s is the start, j is the end
          wordspanbitmap = bitmap(range(s,j))
          if wordspanbitmap & current_hypothesis.bitmap != 0:
            # Bitmap collision, discard this choice
            continue
          elif not french_sentence[s:j] in tm:
            # phrase not translatable directly
            continue
          else:
            newbitmap = (current_hypothesis.bitmap | wordspanbitmap)
          for phrase in tm[french_sentence[s:j]]:
            logprob = current_hypothesis.logprob + phrase.logprob
            fc = 0.0
            # figure out the future cost
            fc_index = None 
            current_index = 0
            # Add the last part to guarantee that the last span will span correctly
            for covered in [char == 'o' for char in bitmap2str(newbitmap, len(french_sentence))] + [True]:
              if covered and fc_index != None:
                # End of coverage area
                fc += future_costs[(fc_index, current_index)]
                fc_index = None
              elif not covered and fc_index == None:
                fc_index = current_index
              current_index += 1 
                
            current_lm_state = current_hypothesis.lm_state
            for word in phrase.english.split():
              (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
              logprob += word_logprob
          
            logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
            new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase, newbitmap, fc)
            aligned_length = sum(1 if x == 'o' else 0 for x in bitmap2str(newbitmap, len(french_sentence)))
            if current_lm_state not in stacks[aligned_length] or stacks[aligned_length][current_lm_state].logprob + stacks[aligned_length][current_lm_state].future_cost < logprob + fc: # second case is recombination
              stacks[aligned_length][current_lm_state] = new_hypothesis
  # take the lowest absolute log prob value as our winner
  winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
  #print bitmap2str(winner.bitmap, len(french_sentence))
  #print len(bitmap2str(winner.bitmap, len(french_sentence)))
  print extract_english(winner)
  sys.stderr.write(extract_english(winner) + "\n");

  # such verbose
  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
      (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
