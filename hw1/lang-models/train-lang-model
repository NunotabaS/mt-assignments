#!/usr/bin/env python
import optparse
import sys
import math
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training language model:\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

E = [e for (f, e) in bitext]
F = [f for (f, e) in bitext]

def train_model_bigram(sentences):
  m = defaultdict(int)
  p = defaultdict(int)
  c = defaultdict(float)
  # Looks at a bigram model and trains it
  for s in sentences:
    sys.stderr.write(".");
    s.insert(0, "__BEGIN__")
    s.append("__END__")
    for w in range(0, len(s) - 1):
      if (s[w], s[w+1]) in m:
        m[(s[w], s[w+1])] += 1
      else:
        m[(s[w], s[w+1])] == 1
      p[s[w]] += 1
  for (a, b) in m:
    c[(b, a)] = float(m[(a,b)]) / float(p[a])
  return c

with open("model_e", "w") as f:
  c = train_model_bigram(E)
  for (b, a) in c:
    f.write(b + "|" + a + " " + str(c[(b, a)]) + "\n")
       
with open("model_f", "w") as f:
  c = train_model_bigram(F)
  for (b, a) in c:
    f.write(b + "|" + a + " " + str(c[(b, a)]) + "\n")
